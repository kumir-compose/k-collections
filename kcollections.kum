|| включить "k-serial/kserial"


|
| Kumir Collections API
| @author Tapeline
| @version 1
|        
| разделитель u29, префикс u28, объект разделитель u30
| 

алг сим __кк__разделитель нач знач := юнисимвол(29) кон
алг сим __кк__префикс нач знач := юнисимвол(28) кон
алг сим __кк__объект_разделитель нач знач := юнисимвол(30) кон
алг цел __индексПовторенияНомер(арг лит строка, арг сим поиск, арг цел повтор) нач
цел указатель = 1
цел повторение = 0
лог найден = нет
нц для указатель от 1 до длин(строка) 
если строка[указатель] = поиск то
повторение := повторение + 1
все
если повторение = повтор то
знач := указатель
найден := да
выход
все
кц
если не найден то
знач := -1
все
кон



| List implementation

алг лит новыйСписок нач
знач := "" + __кк__префикс + "L0";
кон


алг лог являетсяКоллекцией(арг лит объект) нач
если длин(объект) < 2 то
знач := нет
выход
все
знач := объект[1] = __кк__префикс
кон


алг лог являетсяСписком(арг лит объект) нач
знач := являетсяКоллекцией(объект) и объект[2] = 'L'
кон


алг цел длинаКоллекции(арг лит коллекция) 
дано являетсяКоллекцией(коллекция)
нач
лит длинСтр = ""
цел указатель = 3
нц пока указатель <= длин(коллекция) и юникод('0') <= юникод(коллекция[указатель]) <= юникод('9')
длинСтр := длинСтр + коллекция[указатель]
указатель := указатель + 1
кц
лог успех
знач := лит_в_цел(длинСтр, успех)
если не успех то
знач := 0
все
кон


алг добавитьКСписку(аргрез лит список, арг лит значение, арг цел __поз)
дано являетсяСписком(список)
нач
цел длина0
длина0 := длинаКоллекции(список)
лит список1
список1 := __кк__префикс + 'L' + цел_в_лит(длина0 + 1)
список1 := список1 + список[__индексПовторенияНомер(список, __кк__разделитель, 1):__индексПовторенияНомер(список, __кк__разделитель, __поз)]
список1 := список1 + значение
список1 := список1 + список[__индексПовторенияНомер(список, __кк__разделитель, __поз):длин(список)]
список := список1
кон


алг добавитьККонцуСписка(аргрез лит список, арг лит значение) нач
цел длина0
длина0 := длинаКоллекции(список)
лит список1
список1 := __кк__префикс + 'L' + цел_в_лит(длина0 + 1)
цел i
i := __индексПовторенияНомер(список, __кк__разделитель, 1)
если i < 1 то i := 4 все
если i > длин(список) то
список1 := список1 + __кк__разделитель + значение
иначе
список1 := список1 + список[i:длин(список)] + __кк__разделитель + значение
все
список := список1
кон


алг лит получитьИзСписка(арг лит список, арг цел __поз)
дано являетсяСписком(список) и длинаКоллекции(список) >= __поз
нач
цел старт, конец
старт := __индексПовторенияНомер(список, __кк__разделитель, __поз) + 1
конец := __индексПовторенияНомер(список, __кк__разделитель, __поз + 1) - 1
если конец < 1 то конец := длин(список) все
знач := список[старт:конец]
кон


алг удалитьИзСписка(аргрез лит список, арг цел __поз)
дано являетсяСписком(список) и длинаКоллекции(список) >= __поз
нач
цел длина0
длина0 := длинаКоллекции(список)
лит список1
список1 := __кк__префикс + 'L' + цел_в_лит(длина0 - 1)
цел индекс = 0
цел указатель = 3
лог ужеДобавили = нет
нц
если список[указатель] = __кк__разделитель то выход все
указатель := указатель + 1
кц
нц пока указатель <= длин(список)
если не (индекс = __поз) то
список1 := список1 + список[указатель]
все
если список[указатель] = __кк__разделитель то
индекс := индекс + 1
все
указатель := указатель + 1
кц
список := список1
кон


алг цел найтиВСписке(арг лит список, арг лит поиск)
дано являетсяСписком(список)
нач
если длинаКоллекции(список) = 0 то
знач := -1
выход
все
цел индекс = -1
лог найден = нет
нц для индекс от 1 до длинаКоллекции(список)
если получитьИзСписка(список, индекс) = поиск то
знач := индекс
найден := да
выход
все
кц
если не найден то
знач := -1
все
кон


алг заменитьВСписке(аргрез лит список, арг цел индекс, арг лит значение)
дано являетсяСписком(список) и длинаКоллекции(список) >= индекс
нач
удалитьИзСписка(список, индекс)
добавитьКСписку(список, значение, индекс)
кон



| Object implementation

алг лит новыйОбъект нач
знач := __кк__объект_разделитель + новыйСписок + __кк__объект_разделитель + новыйСписок
кон


алг лит собратьОбъект(арг лит ключи, арг лит значения) нач
знач := __кк__объект_разделитель + ключи + __кк__объект_разделитель + значения
кон


алг разобратьОбъект(арг лит объект, рез лит ключи, рез лит значения)
дано являетсяОбъектом(объект)
нач
цел р1 = 1, р2
р2 := __индексПовторенияНомер(объект, __кк__объект_разделитель, 2)
ключи := объект[р1+1:р2-1]
значения := объект[р2+1:длин(объект)]
кон


алг лог являетсяОбъектом(арг лит объект) нач
знач := длин(объект) > 1 и объект[1] = __кк__объект_разделитель
кон


алг задатьПоКлючу(аргрез лит объект, арг лит ключ, арг лит значение)
дано являетсяОбъектом(объект)
нач
лит ключи, значения
разобратьОбъект(объект, ключи, значения)
цел индексКлюча
индексКлюча := найтиВСписке(ключи, ключ)
если индексКлюча = -1 то
добавитьККонцуСписка(ключи, ключ)
добавитьККонцуСписка(значения, значение)
иначе
заменитьВСписке(значения, индексКлюча, значение)
все
объект := собратьОбъект(ключи, значения)
кон


алг цел длинаОбъекта(арг лит объект) 
дано являетсяОбъектом(объект)
нач
лит ключи, значения
разобратьОбъект(объект, ключи, значения)
знач := длинаКоллекции(ключи)
кон


алг лог имеетКлюч(арг лит объект, арг лит ключ)
дано являетсяОбъектом(объект)
нач
лит ключи, значения
разобратьОбъект(объект, ключи, значения)
знач := найтиВСписке(ключи, ключ) <> -1
кон


алг лит получитьПоКлючу(арг лит объект, арг лит ключ)
дано имеетКлюч(объект, ключ)
нач
лит ключи, значения
разобратьОбъект(объект, ключи, значения)
знач := получитьИзСписка(значения, найтиВСписке(ключи, ключ))
кон
